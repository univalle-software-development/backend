name: Sonar Cloud Backend Scan

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - main

permissions:
  packages: write  # Allow write access to packages
  contents: read      

jobs:
  sonarcloud:
    name: SonarCloud
    runs-on: ubuntu-latest
    steps:
      - name: Checkout to main branch
        uses: actions/checkout@v3

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17' # Specify the Java version you want to use  
          distribution: 'corretto' # See 'Supported distributions' for available options

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Install npm dependencies
        run: npm install
        
      - name: Test and coverage
        run: npm run test:coverage

      - name: SonarCloud Scan
        env:
          SONAR_TOKEN: ${{ secrets.BACKEND_SONAR_TOKEN }}
        run: |
          npx sonar-scanner \
            -Dsonar.organization=univalle-software-development \
            -Dsonar.projectKey=univalle-software-development_backend \
            -Dsonar.sources=./src \
            -Dsonar.exclusions=**/node_modules/**,./src/db.js  \
            -Dsonar.host.url=https://sonarcloud.io \
            -Dsonar.javascript.node.maxspace=4096 \
            -Dsonar.tests=./tests \
            -Dsonar.javascript.lcov.reportPaths=coverage/lcov.info \
            -Dsonar.genericCoverageReportPaths=coverage/coverage-final.json

      - name: Login to GitHub Container Registry
        uses: docker/login-action@v3
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GHRC_TOKEN }}
          logout: false

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build & Push to GitHub Package
        uses: opspresso/action-docker@master
        with:
          args: --docker
        env:
          PASSWORD: ${{ secrets.GHRC_TOKEN }}
          REGISTRY: "docker.pkg.github.com"
          IMAGE_NAME: my-app-backend
          LATEST: true

      - name: Install oc
        uses: redhat-actions/oc-installer@v1
        with:
          oc_version: '4.6'

      - name: Authenticate and set context
        uses: redhat-actions/oc-login@v1
        env:
           # These can be stored in secrets, if desired.
          OPENSHIFT_USER: cristiandpt
          OPENSHIFT_NAMESPACE: cristiandpt-dev

        with:
          # URL to your OpenShift cluster.
          # Refer to Step 2.
          openshift_server_url: ${{ secrets.OPENSHIFT_SERVER }}

          # Authentication Token. Can use username and password instead.
          # Refer to Step 3.
          openshift_token: ${{ secrets.OPENSHIFT_TOKEN }}

          # Credentials, if desired instead of token.
          # Username and password override token if they are set.
          # openshift_username: ${{ env.OPENSHIFT_USER }}
          # openshift_password: ${{ secrets.OPENSHIFT_PASSWORD }}

          # Disables SSL cert checking. Use this if you don't have the certificate authority data.
          insecure_skip_tls_verify: true
          # This method is more secure, if the certificate from Step 4 is available.
          # certificate_authority_data: ${{ secrets.CA_DATA }}

          # Optional - this sets your Kubernetes context's current namespace after logging in.
          namespace: ${{ env.OPENSHIFT_NAMESPACE }}
	

  
